/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */







declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Defensive: { // root type
    bowDamageTaken?: number | null; // Float
    damageTaken?: number | null; // Float
    deaths?: number | null; // Int
    meleeDamageTaken?: number | null; // Float
    playerUuid?: string | null; // String
  }
  GameStats: { // root type
    playerUuid?: string | null; // String
  }
  Mutation: {};
  Offensive: { // root type
    arrowsHit?: number | null; // Int
    arrowsShot?: number | null; // Int
    assists?: number | null; // Int
    bowDamageDealt?: number | null; // Float
    damageDealt?: number | null; // Float
    highestStreak?: number | null; // Int
    kills?: number | null; // Int
    meleeDamageDealt?: number | null; // Float
    playerUuid?: string | null; // String
    swordHits?: number | null; // Int
  }
  PitStats: { // root type
    playerUuid?: string | null; // String
  }
  Player: { // root type
    joinedAt?: string | null; // String
    lastJoin?: string | null; // String
    rank?: string | null; // String
    uuid?: string | null; // String
  }
  Query: {};
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Defensive: { // field return type
    bowDamageTaken: number | null; // Float
    damageTaken: number | null; // Float
    deaths: number | null; // Int
    meleeDamageTaken: number | null; // Float
    playerUuid: string | null; // String
  }
  GameStats: { // field return type
    pit: NexusGenRootTypes['PitStats'] | null; // PitStats
    playerUuid: string | null; // String
  }
  Mutation: { // field return type
    registerPlayer: NexusGenRootTypes['Player'] | null; // Player
  }
  Offensive: { // field return type
    arrowsHit: number | null; // Int
    arrowsShot: number | null; // Int
    assists: number | null; // Int
    bowDamageDealt: number | null; // Float
    damageDealt: number | null; // Float
    highestStreak: number | null; // Int
    kills: number | null; // Int
    meleeDamageDealt: number | null; // Float
    playerUuid: string | null; // String
    swordHits: number | null; // Int
  }
  PitStats: { // field return type
    defensive: NexusGenRootTypes['Defensive'] | null; // Defensive
    offensive: NexusGenRootTypes['Offensive'] | null; // Offensive
    playerUuid: string | null; // String
  }
  Player: { // field return type
    gameStats: NexusGenRootTypes['GameStats'] | null; // GameStats
    joinedAt: string | null; // String
    lastJoin: string | null; // String
    rank: string | null; // String
    uuid: string | null; // String
  }
  Query: { // field return type
    player: NexusGenRootTypes['Player'] | null; // Player
    players: Array<NexusGenRootTypes['Player'] | null> | null; // [Player]
  }
}

export interface NexusGenFieldTypeNames {
  Defensive: { // field return type name
    bowDamageTaken: 'Float'
    damageTaken: 'Float'
    deaths: 'Int'
    meleeDamageTaken: 'Float'
    playerUuid: 'String'
  }
  GameStats: { // field return type name
    pit: 'PitStats'
    playerUuid: 'String'
  }
  Mutation: { // field return type name
    registerPlayer: 'Player'
  }
  Offensive: { // field return type name
    arrowsHit: 'Int'
    arrowsShot: 'Int'
    assists: 'Int'
    bowDamageDealt: 'Float'
    damageDealt: 'Float'
    highestStreak: 'Int'
    kills: 'Int'
    meleeDamageDealt: 'Float'
    playerUuid: 'String'
    swordHits: 'Int'
  }
  PitStats: { // field return type name
    defensive: 'Defensive'
    offensive: 'Offensive'
    playerUuid: 'String'
  }
  Player: { // field return type name
    gameStats: 'GameStats'
    joinedAt: 'String'
    lastJoin: 'String'
    rank: 'String'
    uuid: 'String'
  }
  Query: { // field return type name
    player: 'Player'
    players: 'Player'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    registerPlayer: { // args
      uuid: string; // String!
    }
  }
  Query: {
    player: { // args
      uuid: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}