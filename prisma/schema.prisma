generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model PitDefensiveStats {
  id               Int    @id @default(autoincrement())
  playerUuid       String
  deaths           Int    @default(0)
  damageTaken      Float  @default(0)
  meleeDamageTaken Float  @default(0)
  bowDamageTaken   Float  @default(0)
  Player           Player @relation(fields: [playerUuid], references: [uuid])
}

model PitFarmingStats {
  id                   Int    @id @default(autoincrement())
  playerUuid           String
  wheatFarmed          Int    @default(0)
  fishedAnything       Int    @default(0)
  fishedFish           Int    @default(0)
  fishSold             Int    @default(0)
  hayBalesSold         Int    @default(0)
  kingsQuestCompleted  Int    @default(0)
  sewerTreasuresFound  Int    @default(0)
  nightQuestsCompleted Int    @default(0)
  Player               Player @relation(fields: [playerUuid], references: [uuid])
}

model PitMiscellaneousStats {
  id                    Int    @id @default(autoincrement())
  playerUuid            String
  playtime              Float  @default(0)
  leftClicks            Int    @default(0)
  diamondItemsPurchased Int    @default(0)
  chatMessages          Int    @default(0)
  blocksPlaced          Int    @default(0)
  blocksBroken          Int    @default(0)
  jumpsIntoPit          Int    @default(0)
  launcherLaunches      Int    @default(0)
  dailyTradeLimits      Int    @default(0)
  goldTradeLimits       Int    @default(0)
  genisisPoints         Int    @default(0)
  Player                Player @relation(fields: [playerUuid], references: [uuid])
}

model PitOffensiveStats {
  id               Int    @id @default(autoincrement())
  playerUuid       String
  kills            Int    @default(0)
  assists          Int    @default(0)
  swordHits        Int    @default(0)
  arrowsShot       Int    @default(0)
  arrowsHit        Int    @default(0)
  damageDealt      Float  @default(0)
  meleeDamageDealt Float  @default(0)
  bowDamageDealt   Float  @default(0)
  highestStreak    Int    @default(0)
  Player           Player @relation(fields: [playerUuid], references: [uuid])
}

model PitPerformanceStats {
  id                        Int    @id @default(autoincrement())
  playerUuid                String
  xp                        Float  @default(0)
  xpPerHour                 Float  @default(0)
  goldEarned                Float  @default(0)
  goldPerHour               Float  @default(0)
  killDeathRatio            Float  @default(0)
  killDeathPlusAssistRatio  Float  @default(0)
  killsAndAssistsPerHour    Float  @default(0)
  damageDealtOverTakenRatio Float  @default(0)
  bowAccuracy               Float  @default(0)
  contractsStarted          Int    @default(0)
  contractsCompleted        Int    @default(0)
  Player                    Player @relation(fields: [playerUuid], references: [uuid])
}

model PitPerksAndMysticStats {
  id                        Int    @id @default(autoincrement())
  playerUuid                String
  goldenApplesEaten         Int    @default(0)
  goldenHeadsEaten          Int    @default(0)
  lavaBucketsEmptied        Int    @default(0)
  fishingRodsLaunched       Int    @default(0)
  soupsDrank                Int    @default(0)
  tierOneMysticsEnchanted   Int    @default(0)
  tierTwoMysticsEnchanted   Int    @default(0)
  tierThreeMysticsEnchanted Int    @default(0)
  darkPantsEnchanted        Int    @default(0)
  Player                    Player @relation(fields: [playerUuid], references: [uuid])
}

model PitPrestigeStats {
  id                   Int    @id @default(autoincrement())
  playerUuid           String
  prestige             Int    @default(0)
  currentRenown        Int    @default(0)
  lifetimeRenown       Int    @default(0)
  renownShopCompletion Int    @default(0)
  Player               Player @relation(fields: [playerUuid], references: [uuid])
}

model Player {
  id                     Int                     @id
  uuid                   String                  @unique
  rank                   String?
  joinedAt               DateTime                @default(now())
  PitDefensiveStats      PitDefensiveStats?
  PitFarmingStats        PitFarmingStats?
  PitMiscellaneousStats  PitMiscellaneousStats?
  PitOffensiveStats      PitOffensiveStats?
  PitPerformanceStats    PitPerformanceStats?
  PitPerksAndMysticStats PitPerksAndMysticStats?
  PitPrestigeStats       PitPrestigeStats?
  ChatLog                ChatLog[]
}

model ChatLog {
  id         Int      @id @default(autoincrement())
  playerUuid String
  message    String
  time       DateTime @default(now())
  Player     Player   @relation(fields: [playerUuid], references: [uuid])
}
